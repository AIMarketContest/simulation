"""
This type stub file was generated by pyright.
"""

from pettingzoo.utils.env import AECEnv, ParallelEnv

def parallel_wrapper_fn(env_fn): # -> (**kwargs: Unknown) -> to_parallel_wrapper:
    ...

def to_parallel(aec_env): # -> to_parallel_wrapper:
    ...

def from_parallel(par_env): # -> Unknown | OrderEnforcingWrapper:
    ...

class to_parallel_wrapper(ParallelEnv):
    def __init__(self, aec_env) -> None:
        ...
    
    @property
    def observation_spaces(self): # -> dict[Unknown, Unknown]:
        ...
    
    @property
    def action_spaces(self): # -> dict[Unknown, Unknown]:
        ...
    
    def observation_space(self, agent):
        ...
    
    def action_space(self, agent):
        ...
    
    @property
    def unwrapped(self):
        ...
    
    def seed(self, seed=...):
        ...
    
    def reset(self): # -> dict[Unknown, Unknown]:
        ...
    
    def step(self, actions): # -> tuple[dict[Unknown, Unknown], defaultdict[Unknown, int], dict[Unknown, Unknown], dict[Unknown, Unknown]]:
        ...
    
    def render(self, mode=...):
        ...
    
    def state(self):
        ...
    
    def close(self):
        ...
    


class from_parallel_wrapper(AECEnv):
    def __init__(self, parallel_env) -> None:
        ...
    
    @property
    def unwrapped(self):
        ...
    
    @property
    def observation_spaces(self): # -> dict[Unknown, Unknown]:
        ...
    
    @property
    def action_spaces(self): # -> dict[Unknown, Unknown]:
        ...
    
    def observation_space(self, agent):
        ...
    
    def action_space(self, agent):
        ...
    
    def seed(self, seed=...): # -> None:
        ...
    
    def reset(self): # -> None:
        ...
    
    def observe(self, agent):
        ...
    
    def state(self):
        ...
    
    def add_new_agent(self, new_agent): # -> None:
        ...
    
    def step(self, action): # -> None:
        ...
    
    def last(self, observe=...): # -> tuple[Unknown | None, int | Unknown, bool | Unknown, Unknown | dict[Unknown, Unknown]]:
        ...
    
    def render(self, mode=...):
        ...
    
    def close(self): # -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


