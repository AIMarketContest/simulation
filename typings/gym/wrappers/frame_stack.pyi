"""
This type stub file was generated by pyright.
"""

from gym import ObservationWrapper

class LazyFrames:
    r"""Ensures common frames are only stored once to optimize memory use.

    To further reduce the memory use, it is optionally to turn on lz4 to
    compress the observations.

    .. note::

        This object should only be converted to numpy array just before forward pass.

    Args:
        lz4_compress (bool): use lz4 to compress the frames internally

    """
    __slots__ = ...
    def __init__(self, frames, lz4_compress=...) -> None:
        ...
    
    def __array__(self, dtype=...): # -> NDArray[_ScalarType@astype] | ndarray[Unknown, Unknown]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __getitem__(self, int_or_slice): # -> ndarray[Unknown, Unknown]:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


class FrameStack(ObservationWrapper):
    r"""Observation wrapper that stacks the observations in a rolling manner.

    For example, if the number of stacks is 4, then the returned observation contains
    the most recent 4 observations. For environment 'Pendulum-v1', the original observation
    is an array with shape [3], so if we stack 4 observations, the processed observation
    has shape [4, 3].

    .. note::

        To be memory efficient, the stacked observations are wrapped by :class:`LazyFrame`.

    .. note::

        The observation space must be `Box` type. If one uses `Dict`
        as observation space, it should apply `FlattenDictWrapper` at first.

    Example::

        >>> import gym
        >>> env = gym.make('PongNoFrameskip-v0')
        >>> env = FrameStack(env, 4)
        >>> env.observation_space
        Box(4, 210, 160, 3)

    Args:
        env (Env): environment object
        num_stack (int): number of stacks
        lz4_compress (bool): use lz4 to compress the frames internally

    """
    def __init__(self, env, num_stack, lz4_compress=...) -> None:
        ...
    
    def observation(self): # -> LazyFrames:
        ...
    
    def step(self, action): # -> tuple[LazyFrames, Unknown, Unknown, Unknown]:
        ...
    
    def reset(self, **kwargs): # -> LazyFrames:
        ...
    


